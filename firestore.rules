rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Allow public read/write access for MVP development.
    // WARNING: Update these rules for production to restrict access based on user roles/IDs.
    match /{document=**} {
      allow read, write: if true;
    }

    // Example stricter rules (Needs user ID/role implementation):
    /*
    // Users can read their own profile, NGOs can read all profiles
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isNgo(request.auth.uid));
      allow create: if request.auth == null; // Allow creation during registration (adjust based on auth flow)
      allow update: if request.auth != null && request.auth.uid == userId;
    }

    // Donors can create listings, anyone can read, Receivers/NGOs can update (for status change)
    match /listings/{listingId} {
      allow read: if true; // Allow anyone to browse
      allow create: if request.auth != null && isDonor(request.auth.uid);
      allow update: if request.auth != null && (isReceiver(request.auth.uid) || isNgo(request.auth.uid)); // For requesting/status updates
      // Add rules for delete if needed
    }

    // Participants of a conversation can read/write messages
    match /conversations/{conversationId}/messages/{messageId} {
       allow read, write: if request.auth != null && request.auth.uid in resource.data.participants;
       // Need to ensure conversation document stores participant IDs
    }

     // NGOs can read/write donations, Donors/Receivers can read relevant ones
    match /donations/{donationId} {
       allow read: if request.auth != null; // Adjust based on who needs read access
       allow create, update: if request.auth != null && isNgo(request.auth.uid); // NGOs manage donations
    }

    // Helper functions (replace with actual implementation based on user data structure)
    function isDonor(userId) {
      return getUserRole(userId) == 'Donor';
    }
    function isReceiver(userId) {
      return getUserRole(userId) == 'Receiver';
    }
     function isNgo(userId) {
      return getUserRole(userId) == 'NGO';
    }
     function getUserRole(userId) {
      // Access the user's document to get their role
       return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }
    */
  }
}